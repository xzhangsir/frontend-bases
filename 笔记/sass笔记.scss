// 先安装 ruby  在安装 sass
// 编译：  sass （.scss 文件所在的位置）：（编译后的位置及名称） 
// 实时监听编译 ：sass --watch  （.scss 文件所在的位置）：（编译后的位置及名称）[--style       嵌套输出方式 nested
//                                                                                     展开输出方式 expanded  
//                                                                                     紧凑输出方式 compact 
//                                                                                      压缩输出方式 compressed]


// 引入外部的CSS 样式
//引入的外部文件的名称 必须是一下划线开头的 
//在这么引入的时候不需要再写下划线

/*多行注释*/
/*!重要注释*/


/*
* sass -i 正在命令行中执行sass
* type-of(数据) 返回数据类型  number string list color
string 
    to-upper-case()全部大写 to-lower-case()全部小写
    str-length()长度 str-index()两个参数 字符所在位置
*/
// 引入外部的CSS
@import "base.scss";


// 颜色 hsl() 第一个参数是颜色0/360红色 120绿色 240蓝色 第二个参数是饱和度 第三参数是明度
p{
    color:hsl(0,100%,0)
}
$bac : #f99;
$border:1px solid #f99;
ul{
    overflow: hidden;
    line-height: 25px;
    li{
        float: left;
        color:#fff;
        background: $bac;
        border:$bac;
        a{
            text-decoration: none;
        }
        &:hover{
            background: red;
        }
        &{//引用父级选择器
            font-size: 16px;
        }
    }
}

span{
    font: {
        size: 16px;   
        weight: bold;
        family: 'Courier New', Courier, monospace
    }
}
div{
    border: $border {
        left-color:red;
        right:0
    }
}
// 混合指令 定义
@mixin alert {
    text-align: center;
    border: $border;
    span{
        line-height:40px;
    }
}
// 混合指令 使用
button{
    @include alert;
}
// 混合指令 添加参数
@mixin canshu($height,$color) {
    text-align: center;
    line-height:$height;
    border:1px solid #000; 
    background: $color;
}
button{
    @include canshu(40px,#f99)
}

// 继承
div{
    position: absolute;
    left:50%;
    right:50%;
    -webkit-transform: translate(-50%,-50%);
            transform: translate(-50%,-50%);
    a{
        color:red;
    }
}

.content{
    @extend div;
}

$color : red;
p{
    color:lighten($color,10%); //增加颜色的明度
    background: darken($color,10%); //降低颜色的明度
    border:1px solid saturate($color,50%); //增加颜色的饱和度
    border-left-color:desaturate($color,50%);//降低颜色的饱和度
    border-right-color:opacify($color,0.3);//增加颜色的不透明度
    border-bottom-color:transparentize($color,0.3);//降低颜色的不透明度
}


// 列表
$list :1px solid red;
// length($list) 列表的长度
// nth($list,1) 拿出列表中的第 1 项
// index($lsit, 1px)  判断 1px 在$list中的下标
// join(10px 10px , 5px) 将两个列表组合为一个列表
// append($list , 50px ) 向列表 $list 中添加一个50px

header{
    border:$list;
}


//map键值对的形式
$color:(bac:#000,color:#fff);
$size:(size :16px);

// length($color)  查看列表中有几个键值对
// map-get($color,bac) 返回$color这个列表中 bac 所对应的值
// map-keys($color)  查看$color中所有的key
// map-values($color)  查看$color中所有的value
// map-has-key($color,bac) 判断 $color中是否有这个  key   返回布尔值
// map-merge($color,$size) 将两个 map 合并到一起  可以 赋给一个新的 map
// map-remove($color,bac,...) 将bac从$color中移除

// Interpolation #{} 引用变量的名称
// 变量需要镶嵌在字符串之中，就必须需要写在#{}之中

$version:'1.0.1';
/*版本号 #{$version}*/

$name:'left';
$test:'border';

border-#{$name}{
    #{$test}:$border;
}
border-#{right}{
    #{$test}:$border;
}

// 条件语句
$act:false;
$tehme:'flex';
.footer{
     @if $act {
        width: 10px
    } @else if $tehme == 'flex'{
        width: 20px
    } @else{
        height:50px;
    }
}

// 循环
// @for $i from 开始的值 to 结束的值 {
    // 循环到  $i < 结束值   结束
// }
// @for $i from 开始的值 through 结束的值 {
    //  循环到  $i == 结束值   结束
// }
$num:4;
@for $i from 1 through $num{
    .li-#{$i}{
        width:100% / $num * $i; 
    }
}

@for $i from 1 to $num{
    .ol-#{$i}{
        width:100% / $num * $i; 
    }
}



// @each 遍历

$nav: success error warning;

@each $value in $nav{
    .icon-#{$value}{
        background-image:url('../img/#{$value}.png')
    }
}
// @while

$i:6;
@while $i > 0 {
    li:nth-child(#{$i}){
        width:5px * $i;
    }
    $i : $i - 1;
}

// @functtion

$colors:(ligth:#f40,color:#000);

@function color($key){
    @return map-get($colors,$key);
}

span{
    background:color(ligth);
}
// 警告 @warn 错误 @error

$px:(height:50px,width:20px);

@function pxz($map,$key){
    @if not map-has-key($map,$key){
        @warn "在 $px中没有找到#{$key}";
        @error "在 $px中没有找到#{$key}"
    } @else{
        @return map-get($map,$key);
    }
}
.con{
    height:pxz($px,height);
}
del{
    color:#fff;
}

